# File: tox.ini (Templated version)
#
[local_settings]
# project specific local settings
test_pattern_1 = "test*.py"
test_pattern_2 = ""
test_pattern_3 = ""
test_pattern_4 = ""
#
fixture_pattern_1 = ""
fixture_pattern_2 = ""
fixture_pattern_3 = ""
#
# Source pathls (unquoted and space separated list of files/directories) for linting and format checks
source_paths = rcsb/app/template setup.py
#
# Start directory path for test discovery
# Each path must reference valid directory that is searchable by Python (i.e. contains __init__.py)
#  ** It is harmless to point to paths containing no tests.
#
fixture_path_1 = "rcsb/app/tests-template"
fixture_path_2 = ""
fixture_path_3 = ""
test_path_1 = "rcsb/app/tests-template"
# These are placeholders valid source directories without tests files
test_path_2 = ""
test_path_3 = ""
test_path_4 = ""
#
# Comma separate list of directories for which test coverage will be evaluated
coverage_source_paths = "rcsb/app/template"
coverage_exclude_paths = "rcsb/app/__init__.py"
coverage_cutoff = 70
#
## --------------------------------------------------------------------------
##  ----------   No project specific setting beyond this point --------------
# Updated:  3-Jul-2019 jdw Cleanup
#           8-Jul-2019 jdw Disable flake8 plugin (pydocstyle compat issue)
#          12-Jul-2019 jdw Add placeholders for up to four test paths
#          13-Jul-2019 jdw Add coverage exclusion
#           4-Sep-2019 jdw Add fixture option to establish cache state
#           4-Sep-2019 jdw Add support for multiple fixtures (3)
#          11-Dec-2019 jdw Py38 version
#          18-Aug-2020 jdw change tp skip_install= True recreate        = False
#           6-Aug-2021 jdw Py39 version
#
##
[tox]
# The complete list of supported test environments to setup and invoke
envlist = format_pep8-{py39}, lint_pylint-{py39}, format_black-{py39}, py{39}, test_coverage-{py39}
#
minversion = 3.4.0
skip_missing_interpreters = true
skipsdist = false

[testenv]
passenv = CONFIG_SUPPORT_TOKEN_ENV OE_LICENSE CACHE_PATH
whitelist_externals = echo
deps = echo
commands =
    echo "Starting default tests in testenv"

[testenv:py39]
description = 'Run unit tests (unittest runner) using {envpython}'
whitelist_externals = echo
platform=
       macos: darwin
       linux: linux
basepython = python3.9
skip_install = true
recreate = false
alwayscopy=true
usedevelop=true
deps = echo
       -r requirements.txt
commands =
    echo "Starting {envname}"
    {envpython} -V
    {envpython} -m unittest discover -v --start-directory {[local_settings]fixture_path_1} --pattern "{[local_settings]fixture_pattern_1}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]fixture_path_2} --pattern "{[local_settings]fixture_pattern_2}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]fixture_path_3} --pattern "{[local_settings]fixture_pattern_3}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]test_path_1} --pattern "{[local_settings]test_pattern_1}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]test_path_2} --pattern "{[local_settings]test_pattern_2}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]test_path_3} --pattern "{[local_settings]test_pattern_3}"
    {envpython} -m unittest discover -v --start-directory {[local_settings]test_path_4} --pattern "{[local_settings]test_pattern_4}"
    echo "Completed {envname}"

#
[testenv:format_pep8-py39]
description = 'Run selected PEP8 compliance checks (flake8)'
platform=
       macos: darwin
       linux: linux
whitelist_externals = echo
basepython = python3.9
skip_install = true
recreate = false
deps =
    echo
    flake8
    # This plugin is no longer compatible with latest pydocstyles -
    # flake8-docstrings>=0.2.7
    flake8-import-order>=0.9
    -r requirements.txt
commands =
    # Exceptions: D for docstrings, I for imports order and formatting, E302 is slice spacing  - W503 multiline spacing incompatible with black
    flake8 --max-line-length=185 --ignore=D,I,E203,W503  {[local_settings]source_paths}

#
[testenv:lint_pylint-py39]
description = 'Run linting compliance checks (pylint)'
platform=
       macos: darwin
       linux: linux
whitelist_externals = echo
basepython = python3.9
skip_install = true
recreate = false

deps =
    echo
    pylint
    -r requirements.txt
commands =
    echo "Starting {envname}"
    pylint --disable=R,C --reports=n --rcfile={toxinidir}/pylintrc  {[local_settings]source_paths}
    echo "Completed {envname}"

#
[testenv:format_black-py39]
description = 'Run format compliance checks (black)'
platform=
       macos: darwin
       linux: linux
whitelist_externals = echo
basepython = python3.9
skip_install = true
recreate = false

deps =
    echo
    black>=21.5b1
    -r requirements.txt
    #    isort>=4.3.20
commands =
    echo "Starting {envname}"
    black --check --line-length 185  {[local_settings]source_paths}
    #    isort -rc rcsb/utils --check-only
    echo "Completed {envname}"

#
[testenv:test_coverage-py39]
description = 'Run test coverage analysis'
platform=
       macos: darwin
       linux: linux
whitelist_externals = echo
basepython = python3.9
skip_install = true
recreate = false
alwayscopy=true
usedevelop=true
deps =
    echo
    coverage
    -r requirements.txt

commands =
    echo "Starting {envname}"
    coverage erase
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory {[local_settings]fixture_path_1} --pattern "{[local_settings]fixture_pattern_1}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory {[local_settings]fixture_path_2} --pattern "{[local_settings]fixture_pattern_2}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory {[local_settings]fixture_path_3} --pattern "{[local_settings]fixture_pattern_3}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory  {[local_settings]test_path_1} --pattern "{[local_settings]test_pattern_1}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory  {[local_settings]test_path_2} --pattern "{[local_settings]test_pattern_2}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory  {[local_settings]test_path_3} --pattern "{[local_settings]test_pattern_3}"
    coverage run --parallel-mode --omit="{[local_settings]coverage_exclude_paths}" --source="{[local_settings]coverage_source_paths}" -m unittest discover -v --start-directory  {[local_settings]test_path_4} --pattern "{[local_settings]test_pattern_4}"
     echo " ------- Consolidating {envname} data ----------"
    coverage combine
    echo " ------- Building {envname} reports ----------"
    coverage report --fail-under={[local_settings]coverage_cutoff}
    - coverage xml
    echo "Completed {envname}"